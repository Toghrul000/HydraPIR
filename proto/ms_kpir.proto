syntax = "proto3";

package ms_kpir;


// Message for CSV row data
message CsvRow {
  string key = 1;
  string value = 2;
}

// Message for server synchronization
message ServerSync {
  repeated string server_addresses = 1;
}

// Message for sync response
message SyncResponse {
  bool success = 1;
  string message = 2;
}

// Message for client session initialization request
message ClientSessionInitRequest {
  string client_id = 1;
  bytes aes_key = 2;
  bytes hs_key = 3;
}

// Message for client session initialization response
message ClientSessionInitResponse {
  uint32 num_buckets = 1;
  uint32 bucket_size = 2;
  uint32 bucket_bits = 3;
  uint32 n_bits = 4;
  repeated bytes local_hash_keys = 5; 
  bytes bucket_selection_key = 6;
  uint64 entry_u64_count = 7;

}

// Message for single entry update that includes the CSV row and server addresses
message UpdateSingleEntryRequest {
  CsvRow csv_row = 1;
  bytes deterministic_eviction_seed = 2;
}

// A single chunk of data: an index and a byte array
message ByteArrayEntry {
  uint32 index = 1; // Index in the server's array
  repeated uint64 value = 2;  // The u64 vabyte array itself
}

message ConfigData {
  uint64 table_size = 1;
  uint64 mask = 2;
  uint64 k_choices = 3;
  repeated bytes local_hash_keys = 4; // Each 'bytes' entry is expected to be 16 bytes long
  bytes bucket_selection_key = 5;
  uint64 num_total_buckets = 6;
  uint64 slots_per_bucket = 7;

}

message CuckooKeys {
  repeated bytes local_hash_keys = 1; // Each 'bytes' entry is expected to be 16 bytes long
  bytes bucket_selection_key = 2;
}


message DPFKey {
  uint32 n = 1;

  // Fixed-size byte arrays represented as bytes
  bytes seed = 2; // length should be AES_BLOCK_SIZE (16 bytes)

  repeated bytes cw_levels = 3; // Each element is AES_BLOCK_SIZE bytes

  // CW_n is a tuple: ([u8; AES_BLOCK_SIZE - 1], u8, u8)
  message CWN {
    bytes hcw = 1; // AES_BLOCK_SIZE - 1 bytes
    uint32 lcw0 = 2; // use uint32 for u8
    uint32 lcw1 = 3;
  }
  CWN cw_n = 4;

  int64 cw_np1 = 5; // CW_{n+1}
}

message BitDPFKey {
  uint32 n = 1;

  // Fixed-size byte arrays represented as bytes
  bytes seed = 2; // length should be AES_BLOCK_SIZE (16 bytes)

  repeated bytes cw_levels = 3; // Each element is AES_BLOCK_SIZE bytes

  // CW_n is a tuple: ([u8; AES_BLOCK_SIZE - 1], u8, u8)
  message CWN {
    bytes hcw = 1; // AES_BLOCK_SIZE - 1 bytes
    uint32 lcw0 = 2; // use uint32 for u8
    uint32 lcw1 = 3;
  }
  CWN cw_n = 4;

  bytes cw_np1 = 5; // CW_{n+1}
}

message BucketBitOptimizedKeys {
  string client_id = 1;
  uint32 server_id = 2;
  repeated BitDPFKey bucket_key = 3;
}


message DPFKeyBytes {
  uint32 n = 1;

  // Fixed-size byte arrays represented as bytes
  bytes seed = 2; // length should be AES_BLOCK_SIZE (16 bytes)

  repeated bytes cw_levels = 3; // Each element is AES_BLOCK_SIZE bytes

  // CW_n is a tuple: ([u8; AES_BLOCK_SIZE - 1], u8, u8)
  message CWN {
    bytes hcw = 1; // AES_BLOCK_SIZE - 1 bytes
    uint32 lcw0 = 2; // use uint32 for u8
    uint32 lcw1 = 3;
  }
  CWN cw_n = 4;

  repeated int64 cw_np1 = 5; // CW_{n+1}
}

message BucketKeys {
  string client_id = 1;
  uint32 server_id = 2;
  repeated DPFKey bucket_key = 3;
}

message PrivUpdateRequest {
  string client_id = 1;
  uint32 server_id = 2;
  repeated DPFKeyBytes update_keys = 3;
}

message BucketEvalResult {
  repeated int64 value = 1;
}

message ServerResponse {
  repeated BucketEvalResult bucket_result = 1;
}


// A single chunk of data: an index and a byte array
message ByteShareArrayEntry {
  uint32 index = 1; // Index in the server's array
  repeated int64 value = 2;  // The u64 vabyte array itself
}

// Message for client cleanup request
message ClientCleanupRequest {
  string client_id = 1;
}

// Service definition for the PIR server.
// Each server in the multi-server setup implements this service.
service PIRService {
  
  // Stream CSV data to server
  rpc StreamCsvData(stream CsvRow) returns (SyncResponse);
  
  // Send server addresses to first server
  rpc SendServerAddresses(ServerSync) returns (SyncResponse);

  // Services to send whole cuckoo table details to other servers
  rpc StreamByteArrays(stream ByteArrayEntry) returns (SyncResponse);
  rpc SendConfiguration(ConfigData) returns (SyncResponse);

  rpc SendCuckooKeys(CuckooKeys) returns (SyncResponse);

  // Update a single entry in the Cuckoo hash table
  rpc UpdateSingleEntry(UpdateSingleEntryRequest) returns (SyncResponse);
  
  // Client session initialization
  rpc InitClientSession(ClientSessionInitRequest) returns (ClientSessionInitResponse);


  // RPC method where the server receives a PIR Query and returns an Answer.
  rpc PirQuery(BucketKeys) returns (ServerResponse);

  // Cleanup client session
  rpc CleanupClientSession(ClientCleanupRequest) returns (SyncResponse);
}



service PIRServicePrivateUpdate {
  
  // Stream CSV data to server
  rpc StreamCsvData(stream CsvRow) returns (SyncResponse);
  
  // Send server addresses to first server
  rpc SendServerAddresses(ServerSync) returns (SyncResponse);

  // Client session initialization
  rpc InitClientSession(ClientSessionInitRequest) returns (ClientSessionInitResponse);


  // RPC method where the server receives a PIR Query and returns an Answer.
  rpc PirQuery(BucketKeys) returns (ServerResponse);

  // Services to send whole cuckoo table details to other servers
  rpc StreamByteShareArrays(stream ByteShareArrayEntry) returns (SyncResponse);
  rpc SendConfiguration(ConfigData) returns (SyncResponse);

  rpc PrivateUpdate(PrivUpdateRequest) returns (SyncResponse);

  // Cleanup client session
  rpc CleanupClientSession(ClientCleanupRequest) returns (SyncResponse);
}


service BitOptimizedPIRService {
  // Stream CSV data to server
  rpc StreamCsvData(stream CsvRow) returns (SyncResponse);
  
  // Send server addresses to first server
  rpc SendServerAddresses(ServerSync) returns (SyncResponse);

  // Services to send whole cuckoo table details to other servers
  rpc StreamByteArrays(stream ByteArrayEntry) returns (SyncResponse);
  rpc SendConfiguration(ConfigData) returns (SyncResponse);

  rpc SendCuckooKeys(CuckooKeys) returns (SyncResponse);

  // Update a single entry in the Cuckoo hash table
  rpc UpdateSingleEntry(UpdateSingleEntryRequest) returns (SyncResponse);
  
  // Client session initialization
  rpc InitClientSession(ClientSessionInitRequest) returns (ClientSessionInitResponse);


  // RPC method where the server receives a PIR Query and returns an Answer.
  rpc PirQuery(BucketBitOptimizedKeys) returns (ServerResponse);

  // Cleanup client session
  rpc CleanupClientSession(ClientCleanupRequest) returns (SyncResponse);

}



service BitOptimizedPIRServicePrivateUpdate {
  
  // Stream CSV data to server
  rpc StreamCsvData(stream CsvRow) returns (SyncResponse);
  
  // Send server addresses to first server
  rpc SendServerAddresses(ServerSync) returns (SyncResponse);

  // Client session initialization
  rpc InitClientSession(ClientSessionInitRequest) returns (ClientSessionInitResponse);


  // RPC method where the server receives a PIR Query and returns an Answer.
  rpc PirQuery(BucketBitOptimizedKeys) returns (ServerResponse);

  // Services to send whole cuckoo table details to other servers
  rpc StreamByteShareArrays(stream ByteShareArrayEntry) returns (SyncResponse);
  rpc SendConfiguration(ConfigData) returns (SyncResponse);

  rpc PrivateUpdate(PrivUpdateRequest) returns (SyncResponse);

  // Cleanup client session
  rpc CleanupClientSession(ClientCleanupRequest) returns (SyncResponse);
}